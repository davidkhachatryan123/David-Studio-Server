// <auto-generated />
using System;
using David_Studio_Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace David_Studio_Server.Migrations
{
    [DbContext(typeof(davidstudioContext))]
    [Migration("20221124192841_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb3_general_ci")
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb3");

            modelBuilder.Entity("David_Studio_Server.Database.Models.Contact.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("VARCHAR(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR(64)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR(64)");

                    b.HasKey("Id");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Path.Jumbotron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PathId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PathId");

                    b.ToTable("Jumbotrons");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Path.Path", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("VARCHAR(256)");

                    b.HasKey("Id");

                    b.ToTable("Paths", (string)null);
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(2083)
                        .HasColumnType("VARCHAR(2083)");

                    b.Property<int>("PathId")
                        .HasColumnType("int");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR(64)");

                    b.HasKey("Id");

                    b.HasIndex("PathId");

                    b.ToTable("Projects", (string)null);
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.ProjectImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("VARCHAR(2083)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectImages", (string)null);
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.ProjectTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TagId");

                    b.ToTable("ProjectsTags");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("LongName")
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR(64)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("VARCHAR(16)");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.Circle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CircleBlockId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CircleBlockId");

                    b.HasIndex("TagId");

                    b.ToTable("Circles");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.CircleBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("VARCHAR(64)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("CircleBlocks", (string)null);
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("VARCHAR(2083)");

                    b.Property<int>("PathId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PathId");

                    b.ToTable("Services", (string)null);
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Translation.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Translation.TemplateTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("JumbotronId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("JumbotronId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ServiceId");

                    b.ToTable("TemplateTranslations");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Path.Jumbotron", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Path.Path", "Path")
                        .WithMany("Jumbotrons")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Path");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.Project", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Path.Path", "Path")
                        .WithMany("Projects")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Path");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.ProjectImage", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Project.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.ProjectTag", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Project.Project", "Project")
                        .WithMany("Tags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("David_Studio_Server.Database.Models.Project.Tag", "Tag")
                        .WithMany("Projects")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.Circle", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Service.CircleBlock", "CircleBlock")
                        .WithMany("Circles")
                        .HasForeignKey("CircleBlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("David_Studio_Server.Database.Models.Project.Tag", null)
                        .WithMany("Circles")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CircleBlock");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.CircleBlock", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Service.Service", "Service")
                        .WithMany("CircleBlocks")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.Service", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Path.Path", "Path")
                        .WithMany("Services")
                        .HasForeignKey("PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Path");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Translation.TemplateTranslation", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Path.Jumbotron", "Jumbotron")
                        .WithMany("Translations")
                        .HasForeignKey("JumbotronId");

                    b.HasOne("David_Studio_Server.Database.Models.Translation.Language", "Language")
                        .WithMany("TemplateTranslations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("David_Studio_Server.Database.Models.Service.Service", "Service")
                        .WithMany("Translations")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Jumbotron");

                    b.Navigation("Language");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Path.Jumbotron", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Path.Path", b =>
                {
                    b.Navigation("Jumbotrons");

                    b.Navigation("Projects");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.Project", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.Tag", b =>
                {
                    b.Navigation("Circles");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.CircleBlock", b =>
                {
                    b.Navigation("Circles");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.Service", b =>
                {
                    b.Navigation("CircleBlocks");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Translation.Language", b =>
                {
                    b.Navigation("TemplateTranslations");
                });
#pragma warning restore 612, 618
        }
    }
}
