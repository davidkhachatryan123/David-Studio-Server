// <auto-generated />
using David_Studio_Server.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace David_Studio_Server.Migrations
{
    [DbContext(typeof(davidstudioContext))]
    [Migration("20221124121119_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("David_Studio_Server.Database.Models.Contact.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Path.Jumbotron", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DescriptionTranslationId")
                        .HasColumnType("int");

                    b.Property<int>("PathId")
                        .HasColumnType("int");

                    b.Property<int>("TitleTranslationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionTranslationId");

                    b.HasIndex("PathId")
                        .IsUnique();

                    b.HasIndex("TitleTranslationId");

                    b.ToTable("Jumbotrons");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Path.Path", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Paths");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("PathId")
                        .HasColumnType("int");

                    b.Property<int>("Popularity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PathId")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.ProjectImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectImages");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.ProjectTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TagId");

                    b.ToTable("ProjectsTags");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LongName")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.Circle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CircleBlockId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId")
                        .IsUnique();

                    b.ToTable("Circles");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.CircleBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("CircleBlocks");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DescriptionTranslationId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PathId")
                        .HasColumnType("int");

                    b.Property<int>("TitleTranslationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionTranslationId");

                    b.HasIndex("PathId")
                        .IsUnique();

                    b.HasIndex("TitleTranslationId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Translation.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Translation.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Path.Jumbotron", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Translation.Translation", "DescriptionTranslation")
                        .WithMany()
                        .HasForeignKey("DescriptionTranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("David_Studio_Server.Database.Models.Path.Path", "Path")
                        .WithOne("Jumbotron")
                        .HasForeignKey("David_Studio_Server.Database.Models.Path.Jumbotron", "PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("David_Studio_Server.Database.Models.Translation.Translation", "TitleTranslation")
                        .WithMany()
                        .HasForeignKey("TitleTranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionTranslation");

                    b.Navigation("Path");

                    b.Navigation("TitleTranslation");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.Project", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Path.Path", "Path")
                        .WithOne("Project")
                        .HasForeignKey("David_Studio_Server.Database.Models.Project.Project", "PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Path");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.ProjectImage", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Project.Project", "Project")
                        .WithMany("Images")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.ProjectTag", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Project.Project", "Project")
                        .WithMany("Tags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("David_Studio_Server.Database.Models.Project.Tag", "Tag")
                        .WithMany("Projects")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.Circle", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Project.Tag", null)
                        .WithOne("Circle")
                        .HasForeignKey("David_Studio_Server.Database.Models.Service.Circle", "TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.CircleBlock", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Service.Service", null)
                        .WithMany("CircleBlocks")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.Service", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Translation.Translation", "DescriptionTranslation")
                        .WithMany()
                        .HasForeignKey("DescriptionTranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("David_Studio_Server.Database.Models.Path.Path", "Path")
                        .WithOne("Service")
                        .HasForeignKey("David_Studio_Server.Database.Models.Service.Service", "PathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("David_Studio_Server.Database.Models.Translation.Translation", "TitleTranslation")
                        .WithMany()
                        .HasForeignKey("TitleTranslationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DescriptionTranslation");

                    b.Navigation("Path");

                    b.Navigation("TitleTranslation");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Translation.Translation", b =>
                {
                    b.HasOne("David_Studio_Server.Database.Models.Translation.Language", "Language")
                        .WithMany("Translations")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Path.Path", b =>
                {
                    b.Navigation("Jumbotron");

                    b.Navigation("Project");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.Project", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Project.Tag", b =>
                {
                    b.Navigation("Circle");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Service.Service", b =>
                {
                    b.Navigation("CircleBlocks");
                });

            modelBuilder.Entity("David_Studio_Server.Database.Models.Translation.Language", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
